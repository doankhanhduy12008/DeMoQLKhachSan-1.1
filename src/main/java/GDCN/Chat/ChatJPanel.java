/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GDCN.Chat;

import Dao.daoimpl.NguoiDungDaoImpl;
import Dao.daoimpl.TinNhanDaoImpl;
import Dao.entity.NguoiDung;
import Dao.entity.TinNhan;
import Util.XAuth;
import Util.XDate;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.Timer;

/**
 *
 * @author ooOoo
 */
public class ChatJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ChatJPanel
     */
    public ChatJPanel() {
        initComponents();
        addListeners();
        tinNhanDao = new TinNhanDaoImpl();
        nguoiDungDao = new NguoiDungDaoImpl();
        loadChatMessages();
        startChatRefreshTimer();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        bntGuiChat = new javax.swing.JButton();
        txtNDChat = new javax.swing.JTextField();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setBorder(new javax.swing.border.MatteBorder(null));

        jTextArea1.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bntGuiChat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bntGuiChat.setText("Gửi");
        bntGuiChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntGuiChatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNDChat, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bntGuiChat, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bntGuiChat, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(txtNDChat))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bntGuiChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntGuiChatActionPerformed
        sendMessage();
    }//GEN-LAST:event_bntGuiChatActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntGuiChat;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField txtNDChat;
    // End of variables declaration//GEN-END:variables
    private TinNhanDaoImpl tinNhanDao;
    private NguoiDungDaoImpl nguoiDungDao;
     private Timer chatRefreshTimer;
    
    private void startChatRefreshTimer() {
        // Tạo Timer, mỗi 1000ms (1 giây) sẽ kích hoạt ActionListener
        chatRefreshTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadChatMessages(); // Gọi phương thức tải tin nhắn
            }
        });
        chatRefreshTimer.start(); // Bắt đầu Timer
    }
    
    private void addListeners() {
        bntGuiChat.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage();
            }
        });

        txtNDChat.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage();
            }
        });
    }
    
    
    private void loadChatMessages() {
        jTextArea1.setText(""); // Xóa nội dung cũ trước khi tải lại
        try {
            List<TinNhan> messages = tinNhanDao.findAll(); // Lấy tất cả tin nhắn
            for (TinNhan msg : messages) {
                NguoiDung sender = nguoiDungDao.findById(msg.getNguoiGuiUsername()); // Lấy thông tin người gửi
                String senderName = (sender != null && sender.getHoVaTen() != null && !sender.getHoVaTen().isEmpty()) ? sender.getHoVaTen() : msg.getNguoiGuiUsername();
                String senderRole = (sender != null && sender.getVaiTro() != null) ? sender.getVaiTro() : "Unknown";
                String timestamp = Util.XDate.format(msg.getThoiGianGui(), "dd/MM/yyyy HH:mm:ss");
                jTextArea1.append("[" + timestamp + "] [" + senderRole + "] " + senderName + ": " + msg.getNoiDungTinNhan() + "\n");
            }
        } catch (RuntimeException e) {
            e.printStackTrace();
            jTextArea1.append("Lỗi khi tải tin nhắn: " + e.getMessage() + "\n");
        }
    }


    // Thêm phương thức này để gửi tin nhắn
    private void sendMessage() {
        String messageContent = txtNDChat.getText().trim();
        if (messageContent.isEmpty()) {
            // Có thể thêm thông báo cho người dùng rằng tin nhắn không được để trống
            return;
        }

        // Kiểm tra xem người dùng đã đăng nhập và thông tin có hợp lệ không
        if (XAuth.user == null || XAuth.user.getUsername() == null || XAuth.user.getUsername().isEmpty()) {
            jTextArea1.append("Lỗi: Người dùng chưa đăng nhập hoặc thông tin người dùng không hợp lệ. Vui lòng đăng nhập lại.\n");
            return;
        }
        
        TinNhan newMessage = new TinNhan();
        newMessage.setNguoiGuiUsername(XAuth.user.getUsername()); // Lấy username từ XAuth
        newMessage.setNoiDungTinNhan(messageContent);
        newMessage.setThoiGianGui(new java.util.Date()); // Thời gian hiện tại

        try {
            tinNhanDao.create(newMessage); // Lưu tin nhắn vào cơ sở dữ liệu
            
            // Sử dụng XAuth.user.getHoVaTen() để hiển thị tên người dùng nếu có,
            // nếu không, sử dụng username để tránh NullPointerException.
            String senderName = XAuth.user.getHoVaTen() != null && !XAuth.user.getHoVaTen().isEmpty() ? XAuth.user.getHoVaTen() : XAuth.user.getUsername();
            String senderRole = XAuth.user.getVaiTro() != null ? XAuth.user.getVaiTro() : "Unknown";
            String timestamp = Util.XDate.format(new java.util.Date(), "dd/MM/yyyy HH:mm:ss");
            
            jTextArea1.append("[" + timestamp + "] [" + senderRole + "] " + senderName + ": " + messageContent + "\n"); // Hiển thị tin nhắn
            
            txtNDChat.setText(""); // Xóa nội dung trong trường nhập
        } catch (RuntimeException e) {
            e.printStackTrace();
            jTextArea1.append("Lỗi khi gửi tin nhắn: " + e.getMessage() + "\n");
        }
    }
    
     @Override
    public void removeNotify() {
        super.removeNotify();
        if (chatRefreshTimer != null && chatRefreshTimer.isRunning()) {
            chatRefreshTimer.stop();
        }
    }
    
}
