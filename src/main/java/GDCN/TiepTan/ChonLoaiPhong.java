/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GDCN.TiepTan;

import Dao.dao.LoaiPhongDao;
import Dao.dao.PhongDao;
import Dao.daoimpl.LoaiPhongDaoImpl;
import Dao.daoimpl.PhongDaoImpl;
import Dao.entity.LoaiPhong;
import Dao.entity.Phong;
import Util.XAuth;
import Util.XDialog;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JButton;

/**
 *
 * @author Acer
 */
public class ChonLoaiPhong extends javax.swing.JDialog implements ChonLoaiPhongController{

    /**
     * Creates new form ChonLoaiPhong
     */
    public ChonLoaiPhong(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlLoai = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlPhong = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jScrollPane1.setBorder(null);

        pnlLoai.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoai.setLayout(new java.awt.GridLayout(0, 6, 5, 5));
        jScrollPane1.setViewportView(pnlLoai);

        jScrollPane2.setBorder(null);

        pnlPhong.setBackground(new java.awt.Color(255, 255, 255));
        pnlPhong.setLayout(new java.awt.GridLayout(0, 6, 5, 5));
        jScrollPane2.setViewportView(pnlPhong);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChonLoaiPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChonLoaiPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChonLoaiPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChonLoaiPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChonLoaiPhong dialog = new ChonLoaiPhong(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
            });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlLoai;
    private javax.swing.JPanel pnlPhong;
    // End of variables declaration//GEN-END:variables
@Override
public void open() {
    this.setLocationRelativeTo(null);
    loadCards();
}
@Override
public void showThemPhong(int Id) {
    PhongDao dao = new PhongDaoImpl();
    Phong bill = dao.findById(Id);
    
    XAuth.phong = bill; // duy trì user đăng nhập
    this.dispose();
    ThongTinPhong dialog = new ThongTinPhong((Frame) this.getOwner(), true);
//    dialog.setPhong(bill);
    dialog.setVisible(true);
}

private Phong phongDaChon = null;

   public Phong getSelectedPhong() {
        return this.phongDaChon;
    }
   
private void loadCards() {
    LoaiPhongDao dao = new LoaiPhongDaoImpl();
    List<LoaiPhong> LP = dao.findAll();

    pnlLoai.removeAll();
    LP.forEach(card -> {
        pnlLoai.add(this.createButton(card));
    });
}
int Id;
private JButton createButton(LoaiPhong lp) {
    JButton btnCard = new JButton();
    btnCard.setText(String.format("%s", lp.getTenLoaiPhong()));
    btnCard.setPreferredSize(new Dimension(150, 80));
    btnCard.setActionCommand(String.valueOf(lp.getId()));
    btnCard.addActionListener((ActionEvent e) -> {
        Id = Integer.parseInt(e.getActionCommand());
        showThemPhong();
        jScrollPane1.setVisible(false);
    }); 
    return btnCard;
    
}
public void showThemPhong() {
    PhongDao dao = new PhongDaoImpl();
    List<Phong> listPhong = dao.findByIdLoaiPhong(Id);
    pnlPhong.removeAll();

    for (Phong p : listPhong) {
        JButton btn = new JButton("Phòng " + p.getSoPhong());
        btn.setPreferredSize(new Dimension(120, 60));
        btn.setActionCommand(String.valueOf(p.getId()));

        // Sử dụng if-else if để xử lý từng trạng thái
        if (p.getTrangThai().equals("Trống")) {
            btn.setBackground(Color.GREEN);
            
            // ✅ PHÒNG TRỐNG: Gán hành động mở dialog chi tiết
            btn.addActionListener(e -> {
                int idPhong = Integer.parseInt(e.getActionCommand());
                Phong selected = dao.findById(idPhong);

                ThongTinPhong thongTinDialog = new ThongTinPhong((Frame) this.getOwner(), true, selected);
                thongTinDialog.setVisible(true);

                Phong phongDuocChonTuDialog = thongTinDialog.getPhongDaChon();
                if (phongDuocChonTuDialog != null) {
                    this.phongDaChon = phongDuocChonTuDialog;
                    
                    this.dispose();
                }
            });
            
        } else if (p.getTrangThai().equals("Đang sử dụng")) {
            btn.setBackground(Color.RED); // Màu đỏ cho phòng đang thuê
            
            // ✅ PHÒNG ĐANG THUÊ: Gán hành động hiển thị thông báo
            btn.addActionListener(e -> {
                XDialog.alert("Phòng này đã có người thuê, vui lòng chọn phòng khác!");
            });

        } else if (p.getTrangThai().equals("Đang dọn")) {
            btn.setBackground(Color.YELLOW); // Màu vàng cho phòng đang dọn

            // ✅ PHÒNG ĐANG DỌN: Gán hành động hiển thị thông báo
            btn.addActionListener(e -> {
                XDialog.alert("Phòng này đang được dọn dẹp!");
            });

        } else {
            // Các trạng thái khác (ví dụ: đang sửa chữa)
            btn.setBackground(Color.PINK);
            btn.setEnabled(false); // Vẫn vô hiệu hóa cho các trạng thái không xác định
        }

        pnlPhong.add(btn);
    }

    pnlPhong.revalidate();
    pnlPhong.repaint();
}
    
}

